=== PRIMARY CLASSES ===

Driver class:

- Contains our main() method
- Only exists to create an instance of MainWindow.

MainWindow class:

- Contains all of the components that make up the user interface, as well as all the ActionListeners and whatnot that handle them.
- Should not perform any "business logic", instead calling other areas of the program to handle that. It should call final classes, which have
  static methods that perform more detailed actions than one would want to include in an ActionListener
- Inherit from JFrame? JWindow? Canvas? I dunno. Is there a better way than it just being a class?

=== STATE MANAGEMENT CLASSES ===

Settings class:

- Final class that holds all the settings data
- Everything is public, allowing it to be easily accessed and changed anywhere in the program

TierList class:

- Final class (because there's only one at any given time and there's no reason to have to pass it around when calling methods and stuff)
- Uses an ArrayList of ArrayLists to store the tiers, but allows much easier access with methods

=== OTHER UI CLASSES ===

DebugWindow class:

- A non-modal window that is openable with a button in the MainWindow. It can be closed and reopened whenever.
- Contains a text box to which debug and error messages can be printed (standard error redirected to it?)

ModifyWindow class:

- Contains the UI for modifying a fighter's stats
- Inherit from some kind of modal dialog class? I want this to be modal like everything else except the debug window

=== BUSINESS LOGIC CLASSES ==

FileLoaderParser class:

- Final class that has static methods to handle loading and parsing tier list files
- Will set data in the Settings and TierList classes according to what it loads

BattleGenerator class:

- Final class with static methods that deal in generating battles

LookupManager class:

- Final class with static methods that deal in handling stat lookup queries

StatsManager class:

- Final class with static methods that deal in tracking statistics data

=== OBJECTS ===

Fighter class:

- Stores data for all fighters in the system
- TierList class will have ways to access Fighters, but they generally shouldn't be initialized directly
- Has a name and tier. This would eliminate need for CannotGetQueue class, can just use Queue of Fighters
- Fighter class is what interfaces with the StatManager to track stats -- StatManager needs to use character names to ensure Serializability, so
  to mark the winner of a battle, find which Fighter it is with the currentMatchup object, then call recordWin() or something, passing the player as
  a parameter

ComparableArray class:

- More or less unchanged from existing implementation
- Used for easy sorting in the StatsManager class

Matchup class:

- Records a single matchup -- which player got which fighter
- Implements Comparable, and when matchups are compared, the same set of fighters are considered equal even if different players got them
- Goal is to reduce duplicate matchups
- Have a currentMatchup object that might assist in stat tracking

=== OTHER ===

Util class:

- Final class with various utility methods used throughout the program