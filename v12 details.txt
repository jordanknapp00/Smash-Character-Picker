Okay, everything I laid out in my previous v12 plan is kind of terrible. It relied way too much on static classes. Global state is bad, so says everone. Instead, what if we had a system where the MainWindow basically stores all the stuff that Settings or even TierList do. It can have class variables for the number of players, the tier list (which should be an object), the last matchup, etc. And then the ActionListeners can create classes, passing in whatever data they might need (the tier list, number of players, etc), and those classes will have methods that return the data that the MainWindow is looking for.

For example, to load a file, create a FileLoader, and call a method, something like loadFile(). loadFile() will return a FileData object or something. The FileData object can have a TierList object in it, and it can have all the settings data baked in there too. The battle generator class can take in a tier list, number of players, matchup history, cannot get queues, all that stuff, and return a single Matchup. The idea here is to eliminate static classes (outside of a Utilities class or something that has no state), and also minimize passing around data structures like the ProgramState class in v11. I hate just passing around instances of ProgramState and MainWindow, even the name ProgramState goes to show that it's no better than a static class.

Things to keep in mind:

https://softwareengineering.stackexchange.com/questions/40373/so-singletons-are-bad-then-what/218322#218322
https://stackoverflow.com/questions/137975/what-are-drawbacks-or-disadvantages-of-singleton-pattern
https://stackoverflow.com/questions/31409982/java-best-practice-class-with-only-static-methods
https://www3.ntu.edu.sg/home/ehchua/programming/java/j4a_gui.html

=== Class Design ===

= UI Classes =

MainWindow:

	None of the UI components are instance variables. Instantiate everything in the constructor. The instance variables will be the program settings,
	tier list, matchup history, and so on.

SwitchManager:

	Takes in a Matchup and just switches two fighters... should be easy, right?

= Data Classes =

Fighter:

	Has a name, a tier, and maybe even stats data embedded? That's better than stats being a separate thing, I think.

TierList:

	Has an ArrayList of ArrayLists to internally store the tier list data, but has methods to make adding and access easier.

Matchup:

	Consists of the list of Fighters that each player got. But comparisons with Matchups don't consider which player got who. It acts as a set.

= Processing Classes =

FileLoader:

	Loads files. Stores the data in a FileData or something, which the MainWindow will separate out into the TierList and settings data.

BattleGenerator:

	Generates a Matchup based on given parameters.